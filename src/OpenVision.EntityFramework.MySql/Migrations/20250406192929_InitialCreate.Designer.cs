// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenVision.EntityFramework.DbContexts;

#nullable disable

namespace OpenVision.EntityFramework.MySql.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250406192929_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DatabaseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.ImageTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ActiveFlag")
                        .HasColumnType("int");

                    b.Property<byte[]>("AfterProcessImage")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("AfterProcessImageWithKeypoints")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DatabaseId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Descriptors")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("DescriptorsCols")
                        .HasColumnType("int");

                    b.Property<int>("DescriptorsRows")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<byte[]>("Keypoints")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PreprocessImage")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Recos")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("ImageTargets");
                });

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.ApiKey", b =>
                {
                    b.HasOne("OpenVision.EntityFramework.Entities.Database", "Database")
                        .WithMany("ApiKeys")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");
                });

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.ImageTarget", b =>
                {
                    b.HasOne("OpenVision.EntityFramework.Entities.Database", "Database")
                        .WithMany("ImageTargets")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");
                });

            modelBuilder.Entity("OpenVision.EntityFramework.Entities.Database", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("ImageTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
